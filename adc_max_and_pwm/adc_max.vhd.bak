-------------------------------------------------------------------
-- Name        : de0_lite.vhd
-- Author      : 
-- Version     : 0.1
-- Copyright   : Departamento de Eletrônica, Florianópolis, IFSC
-- Description : Projeto base DE10-Lite
-------------------------------------------------------------------

LIBRARY ieee;
USE IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;

entity nios_max is 
	port (
		---------- CLOCK ----------
		ADC_CLK_10:	in std_logic;
		MAX10_CLK1_50: in std_logic;
		MAX10_CLK2_50: in std_logic;
		
		----------- SDRAM ------------
		DRAM_ADDR: out std_logic_vector (12 downto 0);
		DRAM_BA: out std_logic_vector (1 downto 0);
		DRAM_CAS_N: out std_logic;
		DRAM_CKE: out std_logic;
		DRAM_CLK: out std_logic;
		DRAM_CS_N: out std_logic;		
		DRAM_DQ: inout std_logic_vector(15 downto 0);
		DRAM_LDQM: out std_logic;
		DRAM_RAS_N: out std_logic;
		DRAM_UDQM: out std_logic;
		DRAM_WE_N: out std_logic;
		
		----------- SEG7 ------------
		HEX0: out std_logic_vector(7 downto 0);
		HEX1: out std_logic_vector(7 downto 0);
		HEX2: out std_logic_vector(7 downto 0);
		HEX3: out std_logic_vector(7 downto 0);
		HEX4: out std_logic_vector(7 downto 0);
		HEX5: out std_logic_vector(7 downto 0);

		----------- KEY ------------
		KEY: in std_logic_vector(1 downto 0);

		----------- LED ------------
		LEDR: out std_logic_vector(9 downto 0);

		----------- SW ------------
		SW: in std_logic_vector(9 downto 0);

		----------- VGA ------------
		VGA_B: out std_logic_vector(3 downto 0);
		VGA_G: out std_logic_vector(3 downto 0);
		VGA_HS: out std_logic;
		VGA_R: out std_logic_vector(3 downto 0);
		VGA_VS: out std_logic;
	
		----------- Accelerometer ------------
		GSENSOR_CS_N: out std_logic;
		GSENSOR_INT: in std_logic_vector(2 downto 1);
		GSENSOR_SCLK: out std_logic;
		GSENSOR_SDI: inout std_logic;
		GSENSOR_SDO: inout std_logic;
	
		----------- Arduino ------------
		ARDUINO_IO: inout std_logic_vector(15 downto 0);
		ARDUINO_RESET_N: inout std_logic
	);
end entity;


architecture rtl of nios_max is

	component nios is
		port (
			clk_clk                        : in    std_logic                     := 'X';             -- clk
			reset_reset_n                  : in    std_logic                     := 'X';             -- reset_n
			clk_sdram_clk                  : out   std_logic;                                        -- clk
			altpll_0_areset_conduit_export : in    std_logic                     := 'X';             -- export
			altpll_0_locked_conduit_export : out   std_logic;                                        -- export
			sdram_ctrl_wire_addr           : out   std_logic_vector(12 downto 0);                    -- addr
			sdram_ctrl_wire_ba             : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_ctrl_wire_cas_n          : out   std_logic;                                        -- cas_n
			sdram_ctrl_wire_cke            : out   std_logic;                                        -- cke
			sdram_ctrl_wire_cs_n           : out   std_logic;                                        -- cs_n
			sdram_ctrl_wire_dq             : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			sdram_ctrl_wire_dqm            : out   std_logic_vector(1 downto 0);                     -- dqm
			sdram_ctrl_wire_ras_n          : out   std_logic;                                        -- ras_n
			sdram_ctrl_wire_we_n           : out   std_logic                                         -- we_n
		);
	end component nios;
	
	signal sram_dqm : std_logic_vector(1 downto 0);
	
begin
	LEDR(0) <= SW(0);
	
	u0 : component nios
		port map (
			clk_clk                        => MAX10_CLK2_50,       --                     clk.clk
			reset_reset_n                  => '1',                 --                   reset.reset_n
			clk_sdram_clk                  => DRAM_CLK,            --               clk_sdram.clk
			altpll_0_areset_conduit_export => '0', 				    -- altpll_0_areset_conduit.export
			altpll_0_locked_conduit_export => open , 					 -- altpll_0_locked_conduit.export
			sdram_ctrl_wire_addr           => DRAM_ADDR,           --         sdram_ctrl_wire.addr
			sdram_ctrl_wire_ba             => DRAM_BA,             --                        .ba
			sdram_ctrl_wire_cas_n          => DRAM_CAS_N,          --                        .cas_n
			sdram_ctrl_wire_cke            => DRAM_CKE,            --                        .cke
			sdram_ctrl_wire_cs_n           => DRAM_CS_N,           --                        .cs_n
			sdram_ctrl_wire_dq             => DRAM_DQ,             --                        .dq
			sdram_ctrl_wire_dqm            => sram_dqm,            --                        .dqm
			sdram_ctrl_wire_ras_n          => DRAM_RAS_N,          --                        .ras_n
			sdram_ctrl_wire_we_n           => DRAM_WE_N             --                        .we_n
		);

	DRAM_LDQM <= sram_dqm(0);
	DRAM_UDQM <= sram_dqm(1);
		
end;

